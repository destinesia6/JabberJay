name: CI/CD Release Automation

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'

jobs: 
  build-and-release:
    runs-on: windows-latest

    permissions:
      contents: write
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with: 
        fetch-depth: 0

    - name: Get commit message
      id: get_commit_message
      run: |
        commit_message=$(git log --no-merges -1 --format=%B)
        echo "commit_message=$(echo "$commit_message" | sed 's/"/\\"/g')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup .NET 9 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore JabberJay.sln /p:NoWarn=NU1605

    - name: Get App Version
      id: get_version
      run: |
        $app_display_version = dotnet build JabberJay/SoundboardMAUI.csproj --configuration Release --getProperty:ApplicationDisplayVersion
        if ([string]::IsNullOrEmpty($app_display_version)) {
          Write-Error "Error: Failed to retrive ApplicationDisplayVersion"
          exit 1
        } else
        {
          Write-Host "Version: $app_display_version"
        }
        echo "APP_INFORMATIONAL_VERSION=$app_display_version" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Create Release Staging Directory
      run: New-Item -ItemType Directory -Force -Path "./temp_release_staging"
      shell: pwsh

    - name: Publish JabberJay (MAUI, .NET 8)
      run: |
        dotnet publish JabberJay/SoundboardMAUI.csproj -c Release -o ./JabberJay --self-contained true --runtime win-x64
        Copy-Item -Path "./JabberJay" -Destination "./temp_release_staging/" -Recurse -Force
      shell: pwsh

    - name: Publish Installer (.NET 9)
      run: |
        dotnet publish Installer/Installer.csproj -c Release -o ./Installer --self-contained true --runtime win-x64
        Copy-Item -Path "./Installer" -Destination "./temp_release_staging/" -Recurse -Force
      shell: pwsh

    - name: Publish Uninst (.NET 9)
      run: |
        dotnet publish Uninstaller/Uninstaller.csproj -c Release -o ./Uninstaller --self-contained true --runtime win-x64
        Copy-Item -Path "./Uninstaller" -Destination "./temp_release_staging/" -Recurse -Force
      shell: pwsh

    - name: Create 7z Archive from Staging Directory
      run: |
        cd temp_release_staging
        7z a -t7z ../JabberJay.7z *
        cd ..
      shell: pwsh

    - name: Install NetSparkle Tools
      run: |
        dotnet tool install -g NetSparkle.Tools --version 1.2.0
        dotnet tool install -g NetSparkleUpdater.Tools.AppCastGenerator --version 2.8.4
      shell: pwsh

    - name: Prepare NetSparkle Private Key for Signing
      run: |
        $privateKeyContent = "${{ secrets.NETSPARKLE_PRIVATE_KEY }}"
        $privateKeyPath = Join-Path $env:TEMP "NetSparkle_Ed25519.priv"
        Set-Content -Path $privateKeyPath -Value $privateKeyContent -Encoding Ascii
        $publicKeyContent = "${{ vars.NETSPARKLE_PUBLIC_KEY }}"
        $publicKeyPath = Join-Path $env:TEMP "NetSparkle_Ed25519.pub"
        Set-Content -Path $publicKeyPath -Value $publicKeyContent -Encoding Ascii
      shell: pwsh

    - name: Generate Appcast XML
      run: |
        $repo_full_name = "${{ github.repository }}"
        netsparkle-generate-appcast generate --single-file "JabberJay.7z" --file-version "${{ env.APP_INFORMATIONAL_VERSION }}" --key-path "$env:TEMP" --base-url "https://github.com/$repo_full_name/releases/download/${{ env.APP_INFORMATIONAL_VERSION }}/" --appcast-output-directory "." --output-file-name "appcast"
      shell: pwsh
      env:
        NETSPARKLE_KEY_PATH: ''

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.APP_INFORMATIONAL_VERSION }}
        release_name: v${{ env.APP_INFORMATIONAL_VERSION }}
        body: ${{ steps.get_commit_message.outputs.commit_message }}
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}

    - name: Upload JabberJay to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./JabberJay.7z
        asset_name: JabberJay.7z
        asset_content_type: application/x-7z-compressed

    - name: Move Appcast files to docs folder
      run: |
        Move-Item -Path "appcast.xml" -Destination "docs/appcast.xml" -Force
        Move-Item -Path "appcast.xml.signature" -Destination "docs/appcast.xml.signature" -Force
      shell: pwsh

    - name: Commit and Push Appcast to docs folder
      uses: EndBug/add-and-commit@v9
      with:
        add: 'docs/appcast.xml docs/appcast.xml.signature'
        message: 'docs: Update appcast for ${{ github.ref_name }}'
        committer_name: GitHub Actions
        committer_email: actions@github.com
        default_author: github_actions

        
  build-android-release:
    runs-on: ubuntu-latest
    needs: build-and-release
    
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get App Version
        run: |
          APP_INFORMATIONAL_VERSION=$(dotnet build JabberJay/SoundboardMAUI.csproj --configuration Release --getProperty:ApplicationDisplayVersion)
          echo "APP_INFORMATIONAL_VERSION=$APP_INFORMATIONAL_VERSION" >> $GITHUB_ENV
          echo "VERSION: $APP_INFORMATIONAL_VERSION"
        shell: bash

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore JabberJay.sln /p:NoWarn=NU1605
        
      - name: Publish for Android
        run: dotnet publish JabberJay/SoundboardMAUI.csproj -c Release -f:net9.0-android -o ./android_release
        
      - name: Get APK path
        id: get_apk_path
        run: |
          apk_path=$(find ./android_release -name "*.apk" | head -n 1)
          if [ -z "$apk_path" ]; then
            echo "Error: No APK file found in the output directory."
            exit 1
          fi
          echo "APK_PATH=$apk_path" >> $GITHUB_ENV
        shell: bash

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build-and-release.outputs.upload_url }}
          asset_path: ${{ env.APK_PATH }}
          asset_name: JabberJay-Android.apk
          asset_content_type: application/vnd.android.package-archive
